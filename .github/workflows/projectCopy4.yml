name: Copy Project V2 Views

on:
  workflow_dispatch:

jobs:
  create:
    runs-on: ubuntu-latest

    steps:
    - name: Create Token
      id: create-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.PEM }}
        owner: si-sa-a3
        repositories: test3

    - name: Authenticate with CLI
      run: |
        echo "${{ steps.create-token.outputs.token }}" | gh auth login --with-token

    - name: Fetch Project IDs
      run: |
        gh api graphql -f query='
        query {
          organization(login: "si-sa-a3") {
            projectsV2(first: 100) {
              nodes {
                id
                number
                title
              }
            }
          }
        }' > projects.json
        cat projects.json

        # Extract the project ID for the specific project numbers
        source_project_id=$(jq -r '.data.organization.projectsV2.nodes[] | select(.number == 4) | .id' projects.json)
        echo "source_project_id=$source_project_id" >> $GITHUB_ENV

        target_project_id=$(jq -r '.data.organization.projectsV2.nodes[] | select(.number == 5) | .id' projects.json)
        echo "target_project_id=$target_project_id" >> $GITHUB_ENV

    - name: Fetch Source Project Views
      run: |
        gh api graphql -f query='
        query($projectId: ID!) {
          node(id: $projectId) {
            ... on ProjectV2 {
              views(first: 100) {
                nodes {
                  id
                  name
                }
              }
            }
          }
        }' -F projectId=${{ env.source_project_id }} > source_views.json
        cat source_views.json

    - name: Create Views in Target Project
      run: |
        for view_id in $(jq -r '.data.node.views.nodes[] | .id' source_views.json); do
          view_name=$(jq -r --arg id "$view_id" '.data.node.views.nodes[] | select(.id == $id) | .name' source_views.json)
          echo "Creating view $view_name in target project..."

          # Create view in the target project
          gh api graphql -f query='
          mutation($input: CreateProjectV2ViewInput!) {
            createProjectV2View(input: $input) {
              projectV2View {
                id
                name
              }
            }
          }' -F input='{"projectId": "${{ env.target_project_id }}", "name": "'"$view_name"'"}' > create_view_response.json
          cat create_view_response.json
        done
