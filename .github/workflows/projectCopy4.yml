name: Copy Project4

on:
  workflow_dispatch:

jobs:
  create:
    runs-on: ubuntu-latest
    steps:
    - name: Create Token
      id: create-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.PEM }}
        owner: si-sa-a3
        repositories: test3

    - name: Authenticate with CLI
      run: |
        echo "${{ steps.create-token.outputs.token }}" | gh auth login --with-token

    - name: Fetch Project IDs
      run: |
        gh api graphql -f query='
        query {
          organization(login: "si-sa-a3") {
            projectsV2(first: 100) {
              nodes {
                id
                number
                title
              }
            }
          }
        }' > projects.json
        cat projects.json

        # Extract the project ID for the specific project numbers
        source_project_id=$(jq -r '.data.organization.projectsV2.nodes[] | select(.number == 4) | .id' projects.json)
        echo "source_project_id=$source_project_id" >> $GITHUB_ENV

        target_project_id=$(jq -r '.data.organization.projectsV2.nodes[] | select(.number == 5) | .id' projects.json)
        echo "target_project_id=$target_project_id" >> $GITHUB_ENV
      
    - name: Fetch Source Project Views
      id: fetch-views
      run: |
        gh api graphql -f query='
        query($projectId: ID!) {
          node(id: $projectId) {
            ... on ProjectV2 {
              views(first: 100) {
                id
                name
                layout {
                  id
                  name
                }
              }
            }
          }
        }' -F projectId=${{ secrets.SOURCE_PROJECT_ID }} > source_views.json
        cat source_views.json

    - name: Extract View Information
      id: extract-view-info
      run: |
        view_id=$(jq -r '.data.node.views.nodes[0].id' source_views.json)  # Adjust index as needed
        echo "view_id=$view_id" >> $GITHUB_ENV

    - name: Create View in Target Project
      run: |
        gh api graphql -f query='
        mutation($projectId: ID!, $viewName: String!) {
          createProjectV2View(input: {projectId: $projectId, name: $viewName}) {
            view {
              id
              name
            }
          }
        }' -F projectId=${{ secrets.TARGET_PROJECT_ID }} -F viewName="Copied View Name" > create_view_response.json
        cat create_view_response.json

    - name: Get Project Items
      run: |
        gh api graphql -f query='
        query($projectId: ID!) {
          node(id: $projectId) {
            ... on ProjectV2 {
              items(first: 100) {
                nodes {
                  id
                  column {
                    id
                    name
                  }
                  content {
                    __typename
                    ... on DraftIssue {
                      id
                      title
                    }
                    ... on Issue {
                      id
                      title
                    }
                  }
                }
              }
            }
          }
        }' -F projectId=${{ env.source_project_id }} > project_data.json
        cat project_data.json

    - name: Add Items to New Project
      run: |
        # Map column names from source to target project
        declare -A column_map

        # Fetch columns for the target project
        gh api graphql -f query='
        query($projectId: ID!) {
          node(id: $projectId) {
            ... on ProjectV2 {
              columns(first: 100) {
                nodes {
                  id
                  name
                }
              }
            }
          }
        }' -F projectId=${{ env.target_project_id }} > target_columns.json
        cat target_columns.json

        # Create a map of column names to column IDs in the target project
        cat target_columns.json | jq -c '.data.node.columns.nodes[]' | while read -r column; do
          column_name=$(echo "$column" | jq -r '.name')
          column_id=$(echo "$column" | jq -r '.id')
          column_map[$column_name]=$column_id
        done

        # Add items to new project with the same column
        cat project_data.json | jq -c '.data.node.items.nodes[]' | while read -r item; do
          item_id=$(echo "$item" | jq -r '.content.id')
          content_type=$(echo "$item" | jq -r '.content.__typename')
          content_title=$(echo "$item" | jq -r '.content.title')
          column_name=$(echo "$item" | jq -r '.column.name')

          echo "Adding item with ID $item_id and title $content_title to the new project in column $column_name"

          if [ "$content_type" == "Issue" ]; then
            response=$(gh api graphql -f query='
            mutation($projectId: ID!, $issueId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $issueId}) {
                item {
                  id
                }
              }
            }' -F projectId=${{ env.target_project_id }} -F issueId=$item_id)
          fi

          if [ "$content_type" == "DraftIssue" ]; then
            response=$(gh api graphql -f query='
            mutation($projectId: ID!, $draftIssueId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $draftIssueId}) {
                item {
                  id
                }
              }
            }' -F projectId=${{ env.target_project_id }} -F draftIssueId=$item_id)
          fi

          # Map the column name to the target column ID and move the item
          target_column_id=${column_map[$column_name]}
          echo "Moving item with ID $item_id to column $target_column_id"
          gh api graphql -f query='
          mutation($projectId: ID!, $itemId: ID!, $columnId: ID!) {
            moveProjectV2Item(input: {projectId: $projectId, itemId: $itemId, columnId: $columnId}) {
              item {
                id
              }
            }
          }' -F projectId=${{ env.target_project_id }} -F itemId=$item_id -F columnId=$target_column_id

          echo "Response: $response"
        done
