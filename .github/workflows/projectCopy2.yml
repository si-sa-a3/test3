name: Copy Project2

on:
  workflow_dispatch:

jobs:
  create:
    runs-on: ubuntu-latest
    steps:
    - name: Create Token
      id: create-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.PEM }}
        owner: si-sa-a3
        repositories: test3
    - name: Authenticate with CLI
      run: |
        echo "${{ steps.create-token.outputs.token }}" | gh auth login --with-token
    - name: Create Token
      id: create-token2
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.A2_APP_ID }}
        private-key: ${{ secrets.A2_PEM }}
        owner: si-sa-a2
        repositories: test2
    - name: Authenticate with CLI
      run: |
        echo "${{ steps.create-token2.outputs.token }}" | gh auth login --with-token
    - name: Copy GitHub Project
      env:
          ORIGINAL_ORG: si-sa-a3
          PROJECT_NUMBER: 1
          NEW_ORG: si-sa-a2
      run: |
          # Step 1: Get original project data
          gh project view --owner $ORIGINAL_ORG $PROJECT_NUMBER --format json title,description,fields > original_project.json

          # Extract necessary information
          title=$(jq -r '.title' original_project.json)
          # description=$(jq -r '.description' original_project.json)

          # Step 2: Create new project
          gh project create --owner $NEW_ORG --title "$title"

          # Get new project ID
          new_project_id=$(gh project list --owner $NEW_ORG --format json id,title | jq -r --arg title "$title" '.[] | select(.title == $title) | .id')

          # Step 3: Add fields to new project
          fields=$(jq -c '.fields[]' original_project.json)

          for field in $fields; do
            name=$(echo $field | jq -r '.name')
            dataType=$(echo $field | jq -r '.dataType')
            gh project field create --project-id "$new_project_id" --name "$name" --type "$dataType"
          done

          # Step 4: Get original project views
          gh api graphql -f query='
          {
            organization(login: "'"$ORIGINAL_ORG"'") {
              projectNext(number: '"$PROJECT_NUMBER"') {
                views(first: 20) {
                  nodes {
                    id
                    name
                    filters
                    layout
                    groupBy
                    sortBy
                  }
                }
              }
            }
          }' > original_views.json

          # Step 5: Add views to new project
          views=$(jq -c '.data.organization.projectNext.views.nodes[]' original_views.json)

          for view in $views; do
            name=$(echo $view | jq -r '.name')
            filters=$(echo $view | jq -r '.filters')
            layout=$(echo $view | jq -r '.layout')
            groupBy=$(echo $view | jq -r '.groupBy')
            sortBy=$(echo $view | jq -r '.sortBy')
            
            gh api graphql -f query='
            mutation {
              addProjectNextView(input: {projectId: "'"$new_project_id"'", name: "'"$name"'", filters: '"$filters"', layout: '"$layout"', groupBy: '"$groupBy"', sortBy: '"$sortBy"'}) {
                projectNextView {
                  id
                }
              }
            }'
          done
