name: Copy Project2

on:
  workflow_dispatch:

jobs:
  create:
    runs-on: ubuntu-latest
    steps:
    - name: Create Token
      id: create-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.PEM }}
        owner: si-sa-a3
        repositories: test3

    - name: Authenticate with CLI
      run: |
        echo "${{ steps.create-token.outputs.token }}" | gh auth login --with-token

    - name: Fetch Project ID
      run: |
        gh api graphql -f query='
        query {
          organization(login: "si-sa-a3") {
            projectsV2(first: 100) {
              nodes {
                id
                number
                title
              }
            }
          }
        }' > projects.json
        cat projects.json

        # Extract the project ID for the specific project number
        project_id=$(jq -r '.data.organization.projectsV2.nodes[] | select(.number == 4) | .id' projects.json)
        echo "project_id=$project_id" >> $GITHUB_ENV

    - name: Get Project Fields
      run: |
        gh api graphql -f query='
        query {
          node(id: "'${{ env.project_id }}'") {
            ... on ProjectV2 {
              title
              fields(first: 100) {
                nodes {
                  ... on ProjectV2FieldCommon {
                    name
                    dataType
                  }
                  ... on ProjectV2SingleSelectField {  
                    name
                    dataType
                    options {
                      name
                      color
                      description
                    }
                  }
                  ... on ProjectV2IterationField {
                    name
                    dataType
                  }
                }
              }
            }
          }
        }' > project_fields.json
        cat project_fields.json

        # Extract title and fields
        title=$(jq -r '.data.node.title' project_fields.json)
        fields=$(jq -c '.data.node.fields.nodes')
        echo "title=$title" >> $GITHUB_ENV
        echo "fields=$fields" >> $GITHUB_ENV

    - name: Get Additional Project Details
      run: |
        gh project field-list 4 --owner si-sa-a3 --format json > project_fields2.json
        cat project_fields2.json

    - name: Get Project Fields and Columns
      run: |
        gh api graphql -f query='
        query {
          node(id: "'${{ env.project_id }}'") {
            ... on ProjectV2 {
              title
              items(first: 100) {
                nodes {
                  id
                  type
                  content {
                    ... on DraftIssue {
                      title
                    }
                    ... on Issue {
                      title
                    }
                  }
                }
              }
            }
          }
        }' > project_data.json
        cat project_data.json

    - name: Add Items to New Project
      run: |
        # itemを繰り返し、新しいプロジェクトに追加する
        cat project_data.json | jq -c '.data.node.items.nodes[]' | while read -r item; do
          item_id=$(echo "$item" | jq -r '.id')
          content_type=$(echo "$item" | jq -r '.type')
          content_title=$(echo "$item" | jq -r '.content.title')

          echo "Adding item with ID $item_id and title $content_title to the new project"

          if [ "$content_type" == "Issue" ]; then
            # Add issue to the target project
            gh api graphql -f query='
            mutation($projectId: ID!, $issueId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $issueId}) {
                item {
                  id
                }
              }
            }' -F projectId=${{ env.TARGET_PROJECT_ID }} -F issueId=$item_id
          elif [ "$content_type" == "DraftIssue" ]; then
            # Add draft issue to the target project
            gh api graphql -f query='
            mutation($projectId: ID!, $draftIssueId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $draftIssueId}) {
                item {
                  id
                }
              }
            }' -F projectId=${{ env.TARGET_PROJECT_ID }} -F draftIssueId=$item_id
          fi
        done