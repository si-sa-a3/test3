name: item Copy

on:
  workflow_dispatch:

jobs:
  create:
    runs-on: ubuntu-latest
    steps:
    - name: Create Token
      id: create-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.APP_ID }}
        private-key: ${{ secrets.PEM }}
        owner: si-sa-a3
        repositories: test3

    - name: Authenticate with CLI
      run: |
        echo "${{ steps.create-token.outputs.token }}" | gh auth login --with-token

    - name: Fetch Project IDs
      run: |
        gh api graphql -f query='
        query {
          organization(login: "si-sa-a3") {
            projectsV2(first: 100) {
              nodes {
                id
                number
                title
              }
            }
          }
        }' > projects.json
        cat projects.json

        # Extract the project ID for the specific project numbers
        source_project_id=$(jq -r '.data.organization.projectsV2.nodes[] | select(.number == 4) | .id' projects.json)
        echo "source_project_id=$source_project_id" >> $GITHUB_ENV

        target_project_id=$(jq -r '.data.organization.projectsV2.nodes[] | select(.number == 5) | .id' projects.json)
        echo "target_project_id=$target_project_id" >> $GITHUB_ENV
      
    - name: Get Project Items
      run: |
        gh api graphql -f query='
        query($projectId: ID!) {
          node(id: $projectId) {
            ... on ProjectV2 {
              items(first: 100) {
                nodes {
                  id
                  content {
                    __typename
                    ... on DraftIssue {
                      id
                      title
                      body
                    }
                    ... on Issue {
                      id
                      title
                    }
                  }
                }
              }
            }
          }
        }' -F projectId=${{ env.source_project_id }} > project_data.json
        cat project_data.json

    - name: Add Items to New Project
      run: |
        cat project_data.json | jq -c '.data.node.items.nodes[]' | while read -r item; do
          content_id=$(echo "$item" | jq -r '.content.id')
          content_type=$(echo "$item" | jq -r '.content.__typename')
          content_title=$(echo "$item" | jq -r '.content.title')
          content_body=$(echo "$item" | jq -r '.content.body')

          echo "Adding item with ID $content_id and title $content_title to the new project"

          if [ "$content_type" == "Issue" ]; then
            response=$(gh api graphql -f query='
            mutation($projectId: ID!, $issueId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $issueId}) {
                item {
                  id
                }
              }
            }' -F projectId=${{ env.target_project_id }} -F issueId=$content_id)
          elif [ "$content_type" == "DraftIssue" ]; then
            response=$(gh api graphql -f query='
            mutation($projectId: ID!, $title: String!, $body: String!) {
              addProjectV2DraftIssue(input: {projectId: $projectId, title: $title, body: $body}) {
                projectItem {
                  id
                }
              }
            }' -F projectId=${{ env.target_project_id }} -F title="$content_title" -F body="$content_body" )
          else
            echo "Content type $content_type with ID $content_id is not supported for adding to the project."
          fi

          echo "Response: $response"
        done
